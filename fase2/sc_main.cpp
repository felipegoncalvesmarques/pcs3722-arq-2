// All systemc modules should include systemc.h header file
#include "systemc.h"
#include <assert.h>
#include <stdint.h>
#include "jpec.h"
#include "jpec_enc_block_quant.cpp"
#define ERROR 0.001

// DCT
// -433.492 1.851 -1.211 0.579 -0.250 0.236 -0.310 0.241
// 0.912 -0.984 0.280 0.356 -0.566 0.356 -0.034 -0.096
// -0.231 0.147 0.250 -0.557 0.558 -0.291 0.000 0.098
// 0.199 -0.221 0.098 -0.034 0.095 -0.231 0.306 -0.221
// 0.250 -0.320 0.231 -0.112 0.000 0.075 -0.096 0.064
// -0.018 -0.029 0.147 -0.231 0.214 -0.113 0.008 0.029
// 0.096 -0.089 -0.000 0.034 0.040 -0.173 0.250 -0.184
// 0.054 -0.096 0.125 -0.106 0.015 0.106 -0.173 0.131

// DQT
// 2 2 1 2 3 6 7 9
// 2 2 2 3 4 8 8 8
// 2 2 2 3 6 8 10 8
// 2 2 3 4 7 12 11 9
// 3 3 5 8 10 15 14 11
// 3 5 8 9 11 15 16 13
// 7 9 11 12 14 17 17 14
// 10 13 13 14 16 14 14 14

// Quant
// -216 0 -1 0 0 0 0 0
// 0 0 0 0 0 0 0 0
// 0 0 0 0 0 0 0 0
// 0 0 0 0 0 0 0 0
// 0 0 0 0 0 0 0 0
// 0 0 0 0 0 0 0 0
// 0 0 0 0 0 0 0 0
// 0 0 0 0 0 0 0 0


// sc_main in top level function like in C++ main
int sc_main(int argc, char* argv[]) {
  float dct_in[64] = {
    -433.492, 1.851, -1.211, 0.579, -0.250, 0.236, -0.310, 0.241,
    0.912, -0.984, 0.280, 0.356, -0.566, 0.356, -0.034, -0.096,
    -0.231, 0.147, 0.250, -0.557, 0.558, -0.291, 0.000, 0.098,
    0.199, -0.221, 0.098, -0.034, 0.095, -0.231, 0.306, -0.221,
    0.250, -0.320, 0.231, -0.112, 0.000, 0.075, -0.096, 0.064,
    -0.018, -0.029, 0.147, -0.231, 0.214, -0.113, 0.008, 0.029,
    0.096, -0.089, -0.000, 0.034, 0.040, -0.173, 0.250, -0.184
  };

  int dqt_in[64] = {
    2, 2, 1, 2, 3, 6, 7, 9,
    2, 2, 2, 3, 4, 8, 8, 8,
    2, 2, 2, 3, 6, 8, 10, 8,
    2, 2, 3, 4, 7, 12, 11, 9,
    3, 3, 5, 8, 10, 15, 14, 11,
    3, 5, 8, 9, 11, 15, 16, 13,
    7, 9, 11, 12, 14, 17, 17, 14,
    10, 13, 13, 14, 16, 14, 14, 14
  };

  int quant_expected[64] = {
    -216, 0, -1, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0
  };


  sc_signal<float> dct[BLOCK_SIZE];
  sc_signal<int> dqt[BLOCK_SIZE];
  sc_signal<int> quant_block[BLOCK_SIZE];

  jpec_enc_block_quant quant("quant");

  for (int i = 0; i < BLOCK_SIZE; i++) {
    quant.dct[i](dct[i]);
    quant.dqt[i](dqt[i]);
    quant.quant_block[i](quant_block[i]);
  }
  sc_start();

  for (int i = 0; i < BLOCK_SIZE; i++) {
    dct[i] = dct_in[i];
    dqt[i] = dqt_in[i];
  }
  sc_start(1, SC_NS);
  for (int i = 0; i < BLOCK_SIZE; i++) {
    cout << quant_block[i].read() << " and " << quant_expected[i] << '\n';
    assert(quant_block[i].read() - quant_expected[i] < ERROR && quant_expected[i] -  quant_block[i].read() < ERROR);
  }

  return(0);
}
